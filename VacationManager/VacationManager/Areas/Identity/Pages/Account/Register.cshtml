@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Username" class="form-control" autocomplete="username" aria-required="true" />
                <label asp-for="Input.Username">Username</label>
                <span asp-validation-for="Input.Username" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email</label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.FirstName" class="form-control" aria-required="true" />
                <label asp-for="Input.FirstName">First Name</label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.LastName" class="form-control" aria-required="true" />
                <label asp-for="Input.LastName">Last Name</label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label asp-for="Input.Password">Password</label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <select asp-for="Input.RoleId" asp-items="@Model.Roles" class="form-control" aria-required="true">
                    <option value="">Select Role</option>
                </select>
                <label asp-for="Input.RoleId">Role</label>
                <span asp-validation-for="Input.RoleId" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3" id="teamDropdownDiv">
                <select asp-for="Input.TeamId" class="form-control" aria-required="true">
                    <option value="">Select Team</option>
                    @foreach (var team in Model.Teams)
                    {
                        <option value="@team.Id" data-team-leader-id="@team.TeamLeaderId">@team.Name</option>
                    }
                </select>
                <label asp-for="Input.TeamId">Team</label>
                <span asp-validation-for="Input.TeamId" class="text-danger"></span>
            </div>
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
    @* <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">
                                article
                                about setting up this ASP.NET application to support logging in via external services
                            </a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div> *@
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var roleDropdown = document.getElementById('Input_RoleId');
            var teamDropdown = document.getElementById('Input_TeamId');
            var teamDropdownDiv = document.getElementById('teamDropdownDiv');
            var ceoRoleId = 1; // ID of the CEO role
            var unassignedRoleId = 4;
            var teamLeadRoleId = 3; // ID of the Team Lead role 
            var notInTeamId = 1; // ID of "Not in a team" 
            var a = teamDropdown.teamLeaderId

            // Function to update the team dropdown based on the selected role
            function updateTeamDropdown(roleId) {
                if (parseInt(roleId) === ceoRoleId || parseInt(roleId) === unassignedRoleId) {
                    // CEO role is selected, hide the team dropdown
                    teamDropdownDiv.style.display = 'none';
                    // Set the value of the TeamId input to "Not in a team"
                    document.getElementById('Input_TeamId').value = notInTeamId;
                } else if (parseInt(roleId) === teamLeadRoleId) {
                    // Team Lead role is selected, filter out teams with a team lead
                    filterTeamsWithoutTeamLead();
                } else {
                    // Another role is selected, show the full list of teams
                    showAllTeams();
                }
            }

            // Function to filter out teams with a team lead
            function filterTeamsWithoutTeamLead() {
                // Get all options in the team dropdown
                var options = teamDropdown.querySelectorAll('option');
               
                // Iterate over each option and hide teams with a team lead
                options.forEach(function (option) {
                    var teamLeaderId = option.dataset.teamLeaderId;
                    if (teamLeaderId !== "" || option.value === '1')
                    {
                        option.style.display = 'none';
                    } else {
                        option.style.display = 'block';
                    }
                });

                // Show the team dropdown
                teamDropdownDiv.style.display = 'block';
            }

            // Function to show the full list of teams
            function showAllTeams() {

                // Get all options in the team dropdown
                var options = teamDropdown.querySelectorAll('option');
              
                // Iterate over each option and show all teams except "Not in a team"
                options.forEach(function (option) {
                    if (option.value !== '1') {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                });
                // Show the team dropdown
                teamDropdownDiv.style.display = 'block';
                document.getElementById('Input_TeamId').value = '';
            }

            // Call the function to update the team dropdown based on the initial state
            updateTeamDropdown(roleDropdown.value);

            // Event listener for changes in the role dropdown
            roleDropdown.addEventListener('change', function () {
                updateTeamDropdown(this.value);
            });
        });
    </script>
}
