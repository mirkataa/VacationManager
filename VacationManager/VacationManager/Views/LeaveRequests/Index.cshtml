@inject VacationManager.Data.ApplicationDbContext _context
@model IEnumerable<VacationManager.Models.LeaveRequest>

@{
    ViewData["Title"] = "Index";
    var username = User.Identity.Name;
    var user = _context.Users.SingleOrDefault(u => u.Username == username);
    var today = DateTime.Today;
    var usersOnVacation = _context.LeaveRequests
        .Where(lr => lr.IsApproved && today >= lr.StartDate && today <= lr.EndDate)
        .Select(lr => lr.ApplicantId)
        .ToList();
}

<h1>Leave Request</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form id="filterForm">
    <div class="form-group">
        <label for="creationDateFilter">Filter by Creation Date:</label>
        <input type="date" class="form-control" id="creationDateFilter">
    </div>
    <button type="button" class="btn btn-primary" onclick="applyFilter()">Apply Filter</button>
    <button type="button" class="btn btn-secondary" onclick="clearFilter()">Clear Filter</button>
</form>

<label for="pageSizeSelector">Page size:</label>
<select id="pageSizeSelector">
    <option value="10">10</option>
    <option value="25">25</option>
    <option value="50">50</option>
</select>

<table class="table">
    <thead>
        <tr>
            <th>
                @* @Html.DisplayNameFor(model => model.RequestCreationDate) *@
                Creation Date
            </th>
            <th>
               @*  @Html.DisplayNameFor(model => model.ApplicantId) *@
               Applicant
            </th>
            <th>
                @* @Html.DisplayNameFor(model => model.StartDate) *@
                Start Date
            </th>
            <th>
                End Date
            </th>
            <th>
                @* @Html.DisplayNameFor(model => model.IsSickLeave) *@
                Sick Leave
            </th>
            @* <th>
            @Html.DisplayNameFor(model => model.MedicalCertificate)
            </th>
            <th>
            @Html.DisplayNameFor(model => model.IsPaid)
            </th>
            <th>
            @Html.DisplayNameFor(model => model.IsHalfDay)
            </th> *@
            <th>
               @*  @Html.DisplayNameFor(model => model.IsApproved) *@
               Approved
            </th>
            @* <th>
            @Html.DisplayNameFor(model => model.ApproverId)
            </th> *@
            <th>
                @* @Html.DisplayNameFor(model => model.IsCompleted) *@
                Completed
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="tableBody">
@foreach (var item in Model) {
        <tr>
             <td>
                @item.RequestCreationDate.ToString("dd-MM-yyyy")
            </td>
            <td>
                @* @Html.DisplayFor(modelItem => item.ApplicantId) *@
                    @{
                        var applicant = _context.Users.FirstOrDefault(u => u.Id == item.ApplicantId);
                        if (applicant != null)
                        {
                            @Html.DisplayFor(modelItem => applicant.FirstName) @Html.Raw(" ") @Html.DisplayFor(modelItem => applicant.LastName)
                        }
                    }
            </td>
            <td>
                @item.StartDate.ToString("dd-MM-yyyy")
            </td>
            <td>
                @item.EndDate.ToString("dd-MM-yyyy")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsSickLeave)
            </td>
           @*  <td>
                @Html.DisplayFor(modelItem => item.MedicalCertificate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsPaid)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsHalfDay)
            </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.IsApproved)
            </td>
            @* <td>
                @Html.DisplayFor(modelItem => item.ApproverId)
            </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.IsCompleted)
            </td>
            <td>
                    @if (!item.IsApproved && !item.IsCompleted)
                    {
                        var approverbyRole = _context.Users.FirstOrDefault(u => u.Id == item.ApproverId);
                        if (item.ApproverId != null && !usersOnVacation.Contains((int)item.ApproverId))
                        {
                            if (approverbyRole.RoleId == 3 && ((user.RoleId == 1 && !usersOnVacation.Contains(user.Id)) || item.ApproverId == user.Id))
                            {
                                <form asp-action="ApproveRequest" asp-route-id="@item.Id" method="post">
                                    <button type="submit">Approve</button>
                                </form>

                                <form asp-action="RejectRequest" asp-route-id="@item.Id" method="post">
                                    <button type="submit">Reject</button>
                                </form>
                            }
                            else if (approverbyRole.RoleId == 1 && item.ApproverId == user.Id)
                            {
                                <form asp-action="ApproveRequest" asp-route-id="@item.Id" method="post">
                                    <button type="submit">Approve</button>
                                </form>

                                <form asp-action="RejectRequest" asp-route-id="@item.Id" method="post">
                                    <button type="submit">Reject</button>
                                </form>
                            }
                        }
                         if (item.ApproverId != null && usersOnVacation.Contains((int)item.ApproverId) && user.RoleId == 1 && !usersOnVacation.Contains(user.Id))
                        {
                            <form asp-action="ApproveRequest" asp-route-id="@item.Id" method="post">
                                <button type="submit">Approve</button>
                            </form>

                            <form asp-action="RejectRequest" asp-route-id="@item.Id" method="post">
                                <button type="submit">Reject</button>
                            </form>
                        }
                    }
                    @if (item.ApplicantId == user.Id && !item.IsCompleted)
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit|</a> 
                        <a asp-action="Details" asp-route-id="@item.Id">Details|</a> 
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    }
                    else if (item.ApplicantId == user.Id)
                    {
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    }
                </td>
        </tr>
}
    </tbody>
</table>

<button id="prevButton">Previous</button>
<button id="nextButton">Next</button>

@section Scripts {
    <script>
        // Define an array to store the indexes of visible rows
        var visibleRowIndexes = [];
        var flag = false;
        // Define displayPageRows function
        function displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag) {
            var startIndex = (currentPage - 1) * pageSize;
            var endIndex = Math.min(startIndex + pageSize, totalRows);
            if (!flag) {
                $('#tableBody tr').hide(); // Hide all rows
                $('#tableBody tr').slice(startIndex, endIndex).show(); // Show rows for the current page
            }
            else {
                $('#tableBody tr').hide(); // Hide all rows
                for (var i = startIndex; i < endIndex; i++) {
                    $('#tableBody tr:eq(' + visibleRowIndexes[i] + ')').show(); // Show rows starting from startIndex to endIndex
                }
            }
        }

        // Define updateButtonVisibility function
        function updateButtonVisibility(currentPage, pageSize, totalRows) {
            if (currentPage >= Math.ceil(totalRows / pageSize)) {
                $('#nextButton').hide(); // Hide "Next" button if on the last page
            } else {
                $('#nextButton').show();
            }

            if (currentPage == 1) {
                $('#prevButton').hide();
            } else {
                $('#prevButton').show();
            }
        }

        // Apply Filter function
        function applyFilter() {
            var creationDateFilter = $('#creationDateFilter').val();

            visibleRowIndexes = []; // Clear the array before filtering

            $('tbody tr').each(function (index) {
                var creationDate = $(this).find('td:nth-child(1)').text().trim();

                // Convert CreationDate
                var formattedCreationDate = formatDate(creationDate);

                if (formattedCreationDate > creationDateFilter) {
                    $(this).show();
                    visibleRowIndexes.push(index); // Store index if row is visible
                } else {
                    $(this).hide();
                }
            });

            // Update totalRows based on filtered rows
            var totalRows = $('#tableBody tr:visible').length;

            var currentPage = 1;
            var flag = true;
            var pageSize = parseInt($('#pageSizeSelector').val());
            displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
            updateButtonVisibility(currentPage, pageSize, totalRows);
        }

        // Clear Filter function
        function clearFilter() {
            $('#creationDateFilter').val('');
            $('tbody tr').show();

            // Reset totalRows to the original count
            var totalRows = $('#tableBody tr').length;
            var currentPage = 1;
            var pageSize = parseInt($('#pageSizeSelector').val());
            var flag = false;
            visibleRowIndexes = []; // Clear the array before filtering
            displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
            updateButtonVisibility(currentPage, pageSize, totalRows);
        }

        // Function to format date YYY-MM-DD
        function formatDate(dateString) {
            var dateParts = dateString.split('-');
            return dateParts[2] + '-' + dateParts[1] + '-' + dateParts[0];
        }

        // Document ready function
        $(document).ready(function () {
            var currentPage = 1;
            var pageSize = parseInt($('#pageSizeSelector').val());
            var totalRows = $('#tableBody tr').length; // total rows initially
            var flag = false;
            visibleRowIndexes = []; // Clear the array before filtering
            // Event handler for changing page size
            $('#pageSizeSelector').change(function () {
                pageSize = parseInt($(this).val());
                currentPage = 1;
                displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
                updateButtonVisibility(currentPage, pageSize, totalRows);
            });

            // Event handler for previous button
            $('#prevButton').click(function () {
                if (currentPage > 1) {
                    currentPage--;
                    displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
                    updateButtonVisibility(currentPage, pageSize, totalRows);
                }
            });

            // Event handler for next button
            $('#nextButton').click(function () {
                currentPage++;
                displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
                updateButtonVisibility(currentPage, pageSize, totalRows);
            });

            // Initial display
            displayPageRows(currentPage, pageSize, totalRows, visibleRowIndexes, flag);
            updateButtonVisibility(currentPage, pageSize, totalRows);
        });
    </script>
}