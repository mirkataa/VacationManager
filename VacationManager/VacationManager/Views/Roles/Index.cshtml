@model IEnumerable<VacationManager.Models.RoleModel>

@{
    ViewData["Title"] = "Index";
}

<head>
    <link rel="stylesheet" href="~/css/RoleIndex.css"/>
</head>

<h1 align="center">ROLES</h1>

<p>
    <a asp-action="Create" class="btn btn-primary"><i class="fa fa-plus-circle"></i> Create New</a>
</p>

<div id="reminder" style="margin-bottom: 10px;">
    <strong>Reminder:</strong> The roles: CEO, Developer, Team Lead, and Unassigned cannot be deleted or edited.
</div>

<label for="pageSizeSelector">Number of rows:</label>
<select id="pageSizeSelector">
    <option value="10">10</option>
    <option value="25">25</option>
    <option value="50">50</option>
</select>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th style="text-align: center;">
                Number of Users
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="tableBody">
    @foreach (var item in Model) 
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td style="text-align: center;">
                @item.Users.Count()
            </td>
                <td>
                    @{
                        bool isEditable = !new[] { "CEO", "Developer", "Team Lead", "Unassigned" }.Contains(item.Name);
                        string editAction = isEditable ? "Edit" : "#";
                        string deleteAction = isEditable ? "Delete" : "#";
                    }
                    <a asp-action="@editAction" asp-route-id="@item.Id" onclick="return confirmDeleteOrEdit('@item.Name')"><i class="fa fa-edit fa-lg"></i></a> |
                    <a asp-action="Details" asp-route-id="@item.Id"><i class="fa fa-info-circle fa-lg"></i></a> |
                    <a asp-action="@deleteAction" asp-route-id="@item.Id" onclick="return confirmDeleteOrEdit('@item.Name')"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>
                </td>
        </tr>
    }
    </tbody>
</table>

<button id="prevButton" class="btn btn-secondary"><i class="fa fa-chevron-left icon"></i> Previous</button>
<button id="nextButton" class="btn btn-secondary"><i class="fa fa-chevron-right icon"></i> Next</button>

@section Scripts {
    <script>
        function confirmDeleteOrEdit(roleName) {
            if (roleName === "CEO" || roleName === "Developer" || roleName === "Team Lead" || roleName === "Unassigned") {
                alert("This role cannot be deleted or edited.");
                return false;
            }
            return true;
        }

        $(document).ready(function () {
            var currentPage = 1;
            var pageSize = parseInt($('#pageSizeSelector').val());
            var totalRows = $('#tableBody tr').length; // total rows initially

            // Function to display rows for the current page
            function displayPageRows() {
                var startIndex = (currentPage - 1) * pageSize;
                var endIndex = Math.min(startIndex + pageSize, totalRows);
                $('#tableBody tr').hide(); // Hide all rows
                $('#tableBody tr').slice(startIndex, endIndex).show(); // Show rows for the current page
            }

            // Event handler for changing page size
            $('#pageSizeSelector').change(function () {
                pageSize = parseInt($(this).val());
                currentPage = 1;
                displayPageRows();
                updateButtonVisibility();
            });

            // Event handler for previous button
            $('#prevButton').click(function () {
                if (currentPage > 1) {
                    currentPage--;
                    displayPageRows();
                    updateButtonVisibility();
                }
            });

            // Event handler for next button
            $('#nextButton').click(function () {
                currentPage++;
                displayPageRows();
                updateButtonVisibility();
            });

            // Function to update button visibility based on current page and total rows
            function updateButtonVisibility() {
                if (currentPage >= Math.ceil(totalRows / pageSize)) {
                    $('#nextButton').hide(); // Hide "Next" button if on the last page
                } else {
                    $('#nextButton').show();
                }

                if (currentPage == 1) {
                    $('#prevButton').hide();
                } else {
                    $('#prevButton').show();
                }
            }

            // Initial display
            displayPageRows();
            updateButtonVisibility();
        });

    </script>
}